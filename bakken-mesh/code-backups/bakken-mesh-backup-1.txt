#include "painlessMesh.h"

#define   MESH_PREFIX     "username"
#define   MESH_PASSWORD   "password"
#define   MESH_PORT       5555

#define DEVICE            1       //1-laser, 2-photoresistor
#define ANALOG_THRESHOLD  4000    //adjust how might brightness needed to trip the alarm

#define LASER1_PIN        33      //enable gpio
#define LIGHT_SENSOR_PIN  36      //enable gpio


Scheduler userScheduler; // to control your personal task
painlessMesh  mesh;

// User stub
void sendMessage() ; // Prototype so PlatformIO doesn't complain
Task taskSendMessage( TASK_SECOND * 1 , TASK_FOREVER, &sendMessage );

//Laser node: generic message 
//Photo resistor node: "healthy" or "broken" status string
void sendMessage() {
  if(DEVICE == 1){
    String msg = "Hi from laser node";
    //msg += mesh.getNodeId();
    mesh.sendBroadcast( msg );
    taskSendMessage.setInterval( random( TASK_SECOND * 1, TASK_SECOND * 5 ));
  }else if(DEVICE == 2){
    int analogValue = analogRead(LIGHT_SENSOR_PIN);
    if(analogValue > ANALOG_THRESHOLD){ //if laser on photoresistor
      String msg = "healthy";
      mesh.sendBroadcast(msg);
      taskSendMessage.setInterval(random( TASK_SECOND * 1, TASK_SECOND * 5 ));
    }else{
      String msg = "broken";
      mesh.sendBroadcast(msg);
      taskSendMessage.setInterval(random( TASK_SECOND * 1, TASK_SECOND * 5 ));    
    } 
  }  
}

// Needed for painless library
// Laser node: Turns on or off lasers depending on status string
// Photo resistor node: Replies with generic data received printout 
void receivedCallback( uint32_t from, String &msg ) {
  if(DEVICE == 1){
    Serial.printf("startHere: Received from %u msg=%s\n", from, msg.c_str());
    
    if(msg.compareTo("broken") == 0){
      //turn off lasers
      Serial.printf("Laser system disabled\n");
    }else if(msg.compareTo("healthy") == 0){
      //turn on lasers if not already on 
      Serial.printf("Laser system on and armed\n");
    } 
    
  }else if(DEVICE == 2){
    Serial.printf("startHere: Received from %u msg=%s\n", from, msg.c_str()); 
  }
}

void newConnectionCallback(uint32_t nodeId) {
    Serial.printf("--> startHere: New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback() {
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset) {
    Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(),offset);
}

void setup() {
  Serial.begin(115200);

  if(DEVICE == 1){
    //if laser node, initialize lasers to on
    
    pinMode(LASER1_PIN, OUTPUT);    //set laser gpio to output mode
    digitalWrite(LASER1_PIN, LOW);  //set laser on 
  }

//mesh.setDebugMsgTypes( ERROR | MESH_STATUS | CONNECTION | SYNC | COMMUNICATION | GENERAL | MSG_TYPES | REMOTE ); // all types on
  mesh.setDebugMsgTypes( ERROR | STARTUP );  // set before init() so that you can see startup messages

  mesh.init( MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT );
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

  userScheduler.addTask( taskSendMessage );
  taskSendMessage.enable();
}

void loop() {
  // it will run the user scheduler as well
  mesh.update();

}